{
  "rules": [
    {
      "name": "前端源代码",
      "glob": "src/frontend/**/*.{js,jsx,ts,tsx,vue}",
      "use": ["cursor-core", "cursor-web"]
    },
    {
      "name": "后端Python代码",
      "glob": "src/backend/**/*.py",
      "use": ["cursor-core", "cursor-python"]
    },
    {
      "name": "数据分析脚本",
      "glob": "src/analysis/**/*.{py,ipynb}",
      "use": ["cursor-core", "cursor-python", "cursor-notebook"]
    },
    {
      "name": "配置文件",
      "glob": "**/*.{json,yaml,yml,ini,conf}",
      "use": ["cursor-core"]
    },
    {
      "name": "数据库模型",
      "glob": "src/backend/models/**/*.py",
      "use": ["cursor-core", "cursor-python", "cursor-db"]
    },
    {
      "name": "测试文件",
      "glob": "tests/**/*.{py,js,ts}",
      "use": ["cursor-core", "cursor-python", "cursor-web"]
    },
    {
      "name": "文档文件",
      "glob": "**/*.md",
      "use": ["cursor-core", "cursor-docs"]
    },
    {
      "name": "策略开发规则",
      "glob": "src/backend/strategy/**/*.py",
      "use": ["cursor-core", "cursor-python"],
      "rules": [
        "🚨 严禁使用未来数据生成交易信号",
        "必须使用滚动窗口或逐日计算指标",
        "每个时间点只能使用该时间点及之前的数据",
        "策略必须通过数据扩展测试验证",
        "交易记录在数据扩展后必须保持一致",
        "使用逐日循环生成信号，不要使用全量数据",
        "添加详细日志记录策略执行过程"
      ]
    },
    {
      "name": "数据库备份保护规则",
      "glob": "data/backup/**/*",
      "use": ["cursor-core"],
      "rules": [
        "🚨 严禁修改 data/backup 文件夹中的任何文件",
        "🚨 严禁删除 data/backup 文件夹中的任何文件",
        "🚨 严禁移动 data/backup 文件夹中的任何文件",
        "🚨 严禁重命名 data/backup 文件夹中的任何文件",
        "🚨 严禁覆盖 data/backup 文件夹中的任何文件",
        "这些是重要的数据库备份文件，必须保持原样",
        "如果需要操作备份文件，必须先征得用户明确同意",
        "任何涉及 data/backup 的操作都必须先警告用户"
      ]
    },
    {
      "name": "数据库表结构变更规则",
      "glob": "src/backend/models/**/*.py",
      "use": ["cursor-core", "cursor-python", "cursor-db"],
      "rules": [
        "🚨 严禁直接修改数据库表结构",
        "任何表结构变更必须提前写明以下内容:",
        "- 变更的具体表名",
        "- 变更的字段详情(新增/修改/删除)",
        "- 变更原因",
        "- 变更可能带来的影响",
        "- 数据迁移方案",
        "必须经过用户明确确认后才能执行变更",
        "表结构变更后需要更新相关文档"
      ]
    },
    {
      "name": "策略数据库管理规则",
      "glob": "src/backend/strategy/**/*.py",
      "use": ["cursor-core", "cursor-python", "cursor-db"],
      "rules": [
        "🚨 所有交易策略必须存储在数据库中",
        "🚨 严禁直接修改策略源代码文件",
        "🚨 回测系统从数据库读取策略代码执行",
        "更新策略时必须满足以下要求:",
        "- 向用户说明需要更新的具体内容",
        "- 说明更新的原因和预期效果",
        "- 必须等待用户明确同意后才能更新",
        "- 保留原有策略的参数配置",
        "- 记录更新时间和更新内容",
        "发现策略代码问题时:",
        "- 先分析具体原因",
        "- 提供详细的问题说明",
        "- 给出建议的修复方案",
        "- 等待用户同意后再修改",
        "重要策略更新需要在数据库中保留修改记录"
      ]
    },
    {
      "name": "策略参数调优同步规则",
      "glob": "src/backend/strategy/**/*.py",
      "use": ["cursor-core", "cursor-python", "cursor-db"],
      "rules": [
        "🚨 当对数据库进行新增或修改策略参数操作时，必须同步更新数据库中的参数调优配置",
        "🚨 确保所有策略变更都及时反映在参数调优设置中",
        "策略参数变更时必须执行以下操作:",
        "- 检查 strategy_parameter_spaces 表中的参数空间定义",
        "- 更新或新增对应的参数范围和类型配置",
        "- 验证参数空间配置与策略代码的一致性",
        "- 更新相关的参数组(parameter_sets)配置",
        "- 记录参数变更的时间和原因",
        "新增策略时必须:",
        "- 为所有可调参数创建参数空间定义",
        "- 设置合理的参数范围和步长",
        "- 创建默认参数组配置",
        "- 验证参数配置的有效性",
        "修改策略参数时必须:",
        "- 更新对应的参数空间范围",
        "- 检查现有参数组是否仍然有效",
        "- 更新默认参数值",
        "- 保持参数优化历史记录的完整性"
      ]
    },
    {
      "name": "策略基类继承规则",
      "glob": "src/backend/strategy/**/*.py",
      "use": ["cursor-core", "cursor-python"],
      "rules": [
        "🚨 严格遵守策略基类继承规范，避免基类不匹配导致的加载错误",
        "🚨 所有策略类必须继承自正确的基类，并使用正确的构造函数签名",
        "策略基类使用规则:",
        "- 新策略必须继承自 StrategyTemplate 基类",
        "- 导入语句: from src.backend.strategy.templates.strategy_template import StrategyTemplate",
        "- 构造函数签名: __init__(self, name='策略名称', data=None, parameters=None)",
        "- 使用 self.parameters 访问策略参数，不要使用 self.params",
        "- 调用父类构造函数: super().__init__(name=name, data=data, parameters=parameters)",
        "兼容性处理:",
        "- 系统支持 StrategyBase 和 StrategyTemplate 两种基类",
        "- 策略加载函数会自动识别继承自任一基类的策略",
        "- 但新开发的策略统一使用 StrategyTemplate",
        "避免常见错误:",
        "- 不要混用不同基类的构造函数参数",
        "- 不要在 StrategyTemplate 子类中使用 self.params",
        "- 不要使用错误的导入路径",
        "- 确保策略类名与文件名保持一致性",
        "数据库策略代码更新:",
        "- 修改策略基类时必须同步更新数据库中的策略代码",
        "- 使用专门的更新脚本确保代码一致性",
        "- 更新前必须备份原有策略代码",
        "- 验证更新后的策略能够正常加载和执行"
      ]
    },
    {
      "name": "脚本清理规则",
      "glob": "**/*.py",
      "use": ["cursor-core", "cursor-python"],
      "rules": [
        "🚨 所有临时脚本使用完毕后必须及时清理删除",
        "🚨 严禁在项目根目录留存临时调试脚本",
        "需要清理的脚本类型:",
        "- 数据库导入脚本 (add_*_to_db.py, update_*_in_db.py)",
        "- 调试测试脚本 (debug_*.py, test_*.py)",
        "- 数据迁移脚本 (migrate_*.py)",
        "- 参数配置脚本 (configure_*.py, setup_*.py)",
        "- 临时验证脚本 (smoke_test_*.py)",
        "- 数据生成脚本 (generate_*.py)",
        "脚本清理要求:",
        "- 完成任务后立即删除临时脚本",
        "- 保留在 scripts/ 目录中的脚本需要定期清理",
        "- 删除前确认脚本功能已完成且不再需要",
        "- 重要的脚本可以移动到 scripts/archive/ 目录归档",
        "- 清理时保留相关的文档说明",
        "例外情况:",
        "- 核心功能脚本可以保留 (如 start.sh)",
        "- 用户明确要求保留的脚本",
        "- 持续使用的工具脚本",
        "定期清理检查:",
        "- 每次完成功能开发后检查临时脚本",
        "- 项目根目录不应有超过5个临时脚本文件",
        "- scripts/ 目录定期整理，删除过期脚本"
      ]
    },
    {
      "name": "项目代码通读规则",
      "glob": "**/*.{py,js,jsx,ts,tsx,vue,md}",
      "use": ["cursor-core", "cursor-python", "cursor-web", "cursor-docs"],
      "rules": [
        "🚨 通读项目代码时必须同时阅读数据库策略表中的所有具体策略内容",
        "必须深入理解整个框架的运行流程和工作原理",
        "必须全面掌握系统各模块间的交互关系",
        "阅读代码时需要关注以下要点:",
        "- 数据流向和处理逻辑",
        "- 策略执行机制和调用关系",
        "- 回测引擎的工作原理",
        "- 前后端交互接口",
        "- 数据库表结构和关联关系",
        "- 参数优化流程",
        "- 错误处理和异常机制",
        "确保对系统架构有完整的理解后再进行任何修改"
      ]
    }
  ]
}